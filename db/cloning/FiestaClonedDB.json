{"status":{},"contains_secrets":false,"product_version":"2.9.7.1","spec":{"description":"","resources":{"client_attrs":{"b7ba1e1c_deployment":{"y":319.75,"x":588.8671875},"None":{"y":299,"x":510},"f6be2786_deployment":{"y":293.2624699642,"x":878.6956655483}},"service_definition_list":[{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DBClone"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"6fba9cbb_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"01945104_runbook","main_task_local_reference":{"kind":"app_task","name":"6fba9cbb_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DBClone"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"8bee20f0_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"fe42eb38_runbook","main_task_local_reference":{"kind":"app_task","name":"8bee20f0_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DBClone"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"04cc6e24_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"ffd25064_runbook","main_task_local_reference":{"kind":"app_task","name":"04cc6e24_dag"},"variable_list":[]},"name":"action_restart"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DBClone"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"9d7e4dfb_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"ef6acd35_runbook","main_task_local_reference":{"kind":"app_task","name":"9d7e4dfb_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"DBClone"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"897e9b24_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"b81e8f8b_runbook","main_task_local_reference":{"kind":"app_task","name":"897e9b24_dag"},"variable_list":[]},"name":"action_stop"}],"depends_on_list":[],"name":"DBClone","port_list":[],"tier":"","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"REFRESH_OPERATION_ID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"VALIDATED_SNAP_ID","value":"","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}],"description":""},{"singleton":false,"action_list":[{"description":"System action for creating an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"NodeReact"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"07d95a4e_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"c8b17176_runbook","main_task_local_reference":{"kind":"app_task","name":"07d95a4e_dag"},"variable_list":[]},"name":"action_create"},{"description":"System action for deleting an application. Deletes created VMs as well","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"NodeReact"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5017a8bd_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"b7e24d0f_runbook","main_task_local_reference":{"kind":"app_task","name":"5017a8bd_dag"},"variable_list":[]},"name":"action_delete"},{"description":"System action for starting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"NodeReact"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4193add0_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"255cf16d_runbook","main_task_local_reference":{"kind":"app_task","name":"4193add0_dag"},"variable_list":[]},"name":"action_start"},{"description":"System action for stopping an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"NodeReact"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"9d4ca2be_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"1a5248dd_runbook","main_task_local_reference":{"kind":"app_task","name":"9d4ca2be_dag"},"variable_list":[]},"name":"action_stop"},{"description":"System action for restarting an application","type":"system","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_service","name":"NodeReact"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"91b788dd_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"f331cd1e_runbook","main_task_local_reference":{"kind":"app_task","name":"91b788dd_dag"},"variable_list":[]},"name":"action_restart"}],"depends_on_list":[{"kind":"app_service","name":"DBClone"}],"name":"NodeReact","port_list":[],"tier":"","variable_list":[],"description":""}],"substrate_definition_list":[{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1GetDbHostInfo"},{"kind":"app_task","name":"2ValidateSnapID"},{"kind":"app_task","name":"3GetInputFile"},{"kind":"app_task","name":"4GetProfileIDs"},{"kind":"app_task","name":"5CloneDb"},{"kind":"app_task","name":"6MonitorOperation"},{"kind":"app_task","name":"7GetDatabaseInfo"}],"name":"7915bb58_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"1GetDbHostInfo"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2ValidateSnapID"}},{"from_task_reference":{"kind":"app_task","name":"2ValidateSnapID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3GetInputFile"}},{"from_task_reference":{"kind":"app_task","name":"3GetInputFile"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"4GetProfileIDs"}},{"from_task_reference":{"kind":"app_task","name":"4GetProfileIDs"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"5CloneDb"}},{"from_task_reference":{"kind":"app_task","name":"5CloneDb"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"6MonitorOperation"}},{"from_task_reference":{"kind":"app_task","name":"6MonitorOperation"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"7GetDatabaseInfo"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1GetDbHostInfo","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Set Time Machine ID by doing a GET on the Database\nurl  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/databases\/name\/@@{source_db_name}@@?detailed=true\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\n# If the response is ok, set to our TM_ID variable\nif resp.ok:\n  print \"TM_ID={0}\".format(json.loads(resp.content)['timeMachineId'])\n  print \"SOURCE_DBSERVER_ID={0}\".format(json.loads(resp.content)['primaryHost'])\n\n# If it is not, make a new call to get list of possible databases\nelse:\n  print \"Error: Database named '@@{source_db_name}@@' was not found.\"\n  print \"\"\n  print \"The valid database_name values on this Era server are:\"\n  print \"======================================================\"\n  \n  url  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/databases\"\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n  \n  for dbs in json.loads(resp.content):\n    if not dbs['clone']:\n      print dbs['name']\n  \n  print \"======================================================\"\n  print \"Please use one of the above databases, and try again.\"\n  exit(1)","eval_variables":["TM_ID","SOURCE_DBSERVER_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2ValidateSnapID","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Get Time Machine Capability\nurl  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/tms\/@@{TM_ID}@@\/capability?summary=false&time-zone=UTC\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\nif resp.ok:\n  \n  # If the SnapshotID macro is empty, we need to grab the last snap\n  if \"@@{source_snapshot_id}@@\" == \"\":\n  \n    # Cycle through the snapshot modes\n    for modes in json.loads(resp.content)['capability']:\n\n      # We only care about the recent \"Continuous\" snapshots\n      if modes['mode'] == \"CONTINUOUS\":\n        \n        # If there are no snapshots, error out\n        if not modes['snapshots']:\n          print \"ERROR: You must either provide a Snapshot ID, OR have a Continuous Snapshot.\"\n          exit(1)\n          \n        # Else, grab the last Snapshot ID and exit success\n        else:\n          print \"VALIDATED_SNAP_ID={0}\".format(modes['snapshots'][len(modes['snapshots'])-1]['id'])\n          exit(0)\n      \n  # If the snapshot macro is not empty, we need to check that it's a valid snap ID\n  else:\n    \n    # Cycle through the snapshot modes\n    for modes in json.loads(resp.content)['capability']:\n      \n      # Cycle through the snapshots if they exist\n      if modes['snapshots']:\n        for snapshot in modes['snapshots']:\n          \n          # If the SnapshotID macro equals an actual Snap ID, then print out and exit success\n          if snapshot['id'] == \"@@{source_snapshot_id}@@\":\n            print \"VALIDATED_SNAP_ID={0}\".format(snapshot['id'])\n            exit(0)\n          \n    # If we've gotten to this point, the SnapshotID macro is not a valid Snap ID, so error out\n    print \"ERROR: The Snapshot ID you entered is not valid. You must either:\"\n    print \"  1. Provide a valid Snapshot ID from the list below, or\"\n    print \"  2. Leave the SnapshotID field blank to use the last Snapshot.\"\n    print \"  ========================\"\n\n    # Cycle through the snapshot modes\n    for modes in json.loads(resp.content)['capability']:\n      print \"{0} MODE\".format(modes['mode'])\n    \n      # Cycle through the snapshots if they exist\n      if modes['snapshots']:\n        for snapshot in modes['snapshots']:\n          print \"  ------------------------\"\n          print \"  Snapshot ID (copy this): {0}\".format(snapshot['id'])\n          print \"  Snapshot Time Stamp:     {0}\".format(snapshot['snapshotTimeStamp'])\n        \n      # Print message if the don't exist\n      else:\n        print \"  ------------------------\"\n        print \"  No {0} snapshots exist.\".format(modes['mode'].lower())\n\n    exit(1)\n  \n  # If we've gotten this far, something unknown went wrong\n  print \"Unknown error.  Please contact your Administrator.\"\n  exit(1)\n\n# In the event something went wrong with the API call\nelse:\n  print \"Get Time Machine Capability request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["VALIDATED_SNAP_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3GetInputFile","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Get Time Machine Capability\nurl  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/tms\/@@{TM_ID}@@\/clones\/input-file?category=database%3Bvm_info\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\nif resp.ok:\n  \n  # Cycle through the various properties\n  for property in json.loads(resp.content)['properties']:\n    \n    # Set the various variables\n    if property['name'] == \"vm_name\":\n      print \"VM_NAME={0}\".format(property['default_value'])\n    elif property['name'] == \"working_dir\":\n      print \"WORKING_DIR={0}\".format(property['default_value'])\n    elif property['name'] == \"era_deploy_base\":\n      print \"ERA_BASE={0}\".format(property['default_value'])\n    elif property['name'] == \"vm_win_lang_settings\":\n      print \"VM_WIN_LANG={0}\".format(property['default_value'])\n    elif property['name'] == \"sql_user_name\":\n      print \"SQL_USER_NAME={0}\".format(property['default_value'])\n    elif property['name'] == \"authentication_mode\":\n      print \"AUTH_MODE={0}\".format(property['default_value'])\n    elif property['name'] == \"instance_name\":\n      print \"INSTANCE_NAME={0}\".format(property['default_value'])\n\n# In the event something went wrong with the API call\nelse:\n  print \"Get Input File request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["VM_NAME","WORKING_DIR","ERA_BASE","VM_WIN_LANG","SQL_USER_NAME","AUTH_MODE","INSTANCE_NAME"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4GetProfileIDs","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Get Time Machine Capability\nurl  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/dbservers\/@@{SOURCE_DBSERVER_ID}@@?detailed=true&load-drive=false\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\nif resp.ok:\n  \n  # Cycle through the various properties\n  for property in json.loads(resp.content)['properties']:\n    \n    # Set the various variables\n    if property['name'] == \"compute_profile_id\":\n      print \"COMPUTE_PROFILE_ID={0}\".format(property['value'])\n    elif property['name'] == \"network_profile_id\":\n      print \"NETWORK_PROFILE_ID={0}\".format(property['value'])\n    elif property['name'] == \"db_parameter_profile_id\":\n      print \"DB_PROFILE_ID={0}\".format(property['value'])\n\n# In the event something went wrong with the API call\nelse:\n  print \"Get Input File request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["COMPUTE_PROFILE_ID","NETWORK_PROFILE_ID","DB_PROFILE_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5CloneDb","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Set the Clone DB Name\nif \"@@{cloned_db_name}@@\" == \"\":\n  cloneName = '@@{source_db_name}@@_Clone_@@{calm_time(\"%Y%m%d%H%M\")}@@'\nelse:\n  cloneName = \"@@{cloned_db_name}@@\"\n\n# Set the URL and payload\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/tms\/@@{TM_ID}@@\/clones\"\npayload = {\n  \"snapshotId\": \"@@{VALIDATED_SNAP_ID}@@\",\n  \"cloneDescription\": \"Clone of '@@{source_db_name}@@' managed through Calm application @@{calm_application_name}@@\",\n  \"timeZone\": \"UTC\",\n  \"applicationType\": \"sqlserver_database\",\n  \"cloneName\": cloneName,\n  \"cloneInfo\": [\n    {\n      \"name\": \"vm_name\",\n      \"value\": \"@@{VM_NAME}@@\"\n    },\n    {\n      \"name\": \"vm_win_lang_settings\",\n      \"value\": \"@@{VM_WIN_LANG}@@\"\n    },\n    {\n      \"name\": \"sql_user_name\",\n      \"value\": \"@@{SQL_USER_NAME}@@\"\n    },\n    {\n      \"name\": \"authentication_mode\",\n      \"value\": \"@@{AUTH_MODE}@@\"\n    },\n    {\n      \"name\": \"working_dir\",\n      \"value\": \"C:\\\\temp\"\n    },\n    {\n      \"name\": \"era_deploy_base\",\n      \"value\": \"C:\\\\NTNX\\\\ERA_BASE\"\n    },\n    {\n      \"name\": \"create_dbserver\",\n      \"value\": True\n    },\n    {\n      \"name\": \"drives_to_mountpoints\",\n      \"value\": False\n    },\n    {\n      \"name\": \"instance_name\",\n      \"value\": \"@@{INSTANCE_NAME}@@\"\n    },\n    {\n      \"name\": \"database_name\",\n      \"value\": \"@@{source_db_name}@@\"\n    },\n    {\n      \"name\": \"cluster_only\",\n      \"value\": False\n    },\n    {\n      \"name\": \"cluster_db\",\n      \"value\": False\n    },\n    {\n      \"name\": \"compute_profile_id\",\n      \"value\": \"@@{COMPUTE_PROFILE_ID}@@\"\n    },\n    {\n      \"name\": \"network_profile_id\",\n      \"value\": \"@@{NETWORK_PROFILE_ID}@@\"\n    },\n    {\n      \"name\": \"vm_dbserver_admin_password\",\n      \"value\": \"@@{db_password}@@\"\n    }\n  ],\n  \"timeMachineId\": \"@@{TM_ID}@@\",\n  \"latestSnapshot\": False,\n}\n\n# Make the call and set the response operation ID to the variable\nresp = urlreq(url, verb='POST', auth='BASIC', user=era_user, passwd=era_pass, params=json.dumps(payload), headers=headers)\nif resp.ok:\n  print \"CLONE_OPERATION_ID={0}\".format(json.loads(resp.content)['operationId'])\nelse:\n  print \"Post Database clone request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["CLONE_OPERATION_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"6MonitorOperation","attrs":{"exit_status":[],"script":"# Set creds, headers, and URL\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/operations\/@@{CLONE_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(60):\n  \n  print \"Sleeping for 60 seconds.\"\n  sleep(60)\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n  print \"Percentage Complete: {0}\".format(json.loads(resp.content)['percentageComplete'])\n  \n  # If complete, break out of loop\n  if json.loads(resp.content)['percentageComplete'] == \"100\":\n    break\n\n# If the operation did not complete within 20 minutes, assume it's not successful and error out\nif json.loads(resp.content)['percentageComplete'] != \"100\":\n  print \"Get Operation ID timed out\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n\n# Get the newly provision DB Entity Name and set it to a variable\nprint \"CLONE_ENTITY_NAME={0}\".format(json.loads(resp.content)['entityName'])","eval_variables":["CLONE_ENTITY_NAME"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"7GetDatabaseInfo","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Get DB Server IP and ID\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/clones\/name\/@@{CLONE_ENTITY_NAME}@@?detailed=true\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\nif resp.ok:\n  print \"CLONE_SERVER_IP={0}\".format(json.loads(resp.content)['hostIP'])\n  print \"CLONE_ID={0}\".format(json.loads(resp.content)['id'])\n  print \"CLONE_SERVER_ID={0}\".format(json.loads(resp.content)['primaryHost'])\nelse:\n  print \"Get DB info request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["CLONE_SERVER_IP","CLONE_ID","CLONE_SERVER_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]}],"description":"","name":"a19beb07_runbook","main_task_local_reference":{"kind":"app_task","name":"7915bb58_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1CleanupDB"},{"kind":"app_task","name":"2MonitorCleanupOp"},{"kind":"app_task","name":"3DeregisterDBServer"},{"kind":"app_task","name":"4MonitorDeregOp"}],"name":"2be702b8_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"1CleanupDB"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2MonitorCleanupOp"}},{"from_task_reference":{"kind":"app_task","name":"2MonitorCleanupOp"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3DeregisterDBServer"}},{"from_task_reference":{"kind":"app_task","name":"3DeregisterDBServer"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"4MonitorDeregOp"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1CleanupDB","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Cleanup the DB and get Operation ID\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/clones\/@@{CLONE_ID}@@?cleanup=true&delete-db=true\"\nresp = urlreq(url, verb='DELETE', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\nif resp.ok:\n  print \"CLEANUP_OPERATION_ID={0}\".format(json.loads(resp.content)['operationId'])\n  #print \"Success!\"\nelse:\n  print \"Cleanup Clone Operation failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["CLEANUP_OPERATION_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2MonitorCleanupOp","attrs":{"script":"# Set creds, headers, and URL\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/operations\/@@{CLEANUP_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n  \n  print \"Sleeping for 30 seconds.\"\n  sleep(30)\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n  print \"Percentage Complete: {0}\".format(json.loads(resp.content)['percentageComplete'])\n  \n  # If complete, break out of loop\n  if json.loads(resp.content)['percentageComplete'] == \"100\":\n    break    \n\n# If the operation did not complete within 10 minutes, assume it's not successful and error out\nif json.loads(resp.content)['percentageComplete'] != \"100\":\n  print \"Cleanup Operation timed out\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)\n#sleep(60)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3DeregisterDBServer","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Cleanup the DB and get Operation ID\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/dbservers\/@@{CLONE_SERVER_ID}@@?remove=false&soft-remove=false&delete=true&delete-vm-snapshots=true&delete-vgs=true\"\nresp = urlreq(url, verb='DELETE', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\nif resp.ok:\n  print \"DEREGISTER_OPERATION_ID={0}\".format(json.loads(resp.content)['operationId'])\nelse:\n  print \"Deregister DB Server Operation failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["DEREGISTER_OPERATION_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"4MonitorDeregOp","attrs":{"script":"# Set creds, headers, and URL\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/operations\/@@{DEREGISTER_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n  \n  print \"Sleeping for 30 seconds.\"\n  sleep(30)\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n  print \"Percentage Complete: {0}\".format(json.loads(resp.content)['percentageComplete'])\n  \n  # If complete, break out of loop\n  if json.loads(resp.content)['percentageComplete'] == \"100\":\n    break    \n\n# If the operation did not complete within 10 minutes, assume it's not successful and error out\nif json.loads(resp.content)['percentageComplete'] != \"100\":\n  print \"Deregistration Operation timed out\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"5134969e_runbook","main_task_local_reference":{"kind":"app_task","name":"2be702b8_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"EXISTING_VM","name":"Era_Cloned_DB","readiness_probe":{"connection_type":"POWERSHELL","retries":"5","connection_protocol":"http","connection_port":5985,"address":"@@{ip_address}@@","delay_secs":"60","disable_readiness_probe":true},"os_type":"Linux","create_spec":{"type":"PROVISION_EXISTING_MACHINE","address":"@@{CLONE_SERVER_IP}@@"},"variable_list":[]},{"description":"","action_list":[{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"NodeReact_AHV"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"78090e1a_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"ba56329f_runbook","main_task_local_reference":{"kind":"app_task","name":"78090e1a_dag"},"variable_list":[]},"name":"pre_action_create"},{"description":"","type":"fragment","critical":false,"runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_substrate","name":"NodeReact_AHV"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"5261a8bb_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"5324f16d_runbook","main_task_local_reference":{"kind":"app_task","name":"5261a8bb_dag"},"variable_list":[]},"name":"post_action_delete"}],"type":"AHV_VM","name":"NodeReact_AHV","readiness_probe":{"connection_type":"SSH","retries":"5","connection_protocol":"","connection_port":22,"address":"@@{platform.status.resources.nic_list[0].ip_endpoint_list[0].ip}@@","delay_secs":"60","disable_readiness_probe":false,"login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"editables":{"create_spec":{"resources":{"nic_list":{},"serial_port_list":{}}}},"os_type":"Linux","create_spec":{"name":"nodereacte-@@{calm_array_index}@@-@@{calm_time}@@","resources":{"nic_list":[{"nic_type":"NORMAL_NIC","ip_endpoint_list":[],"network_function_chain_reference":null,"network_function_nic_type":"INGRESS","mac_address":"","subnet_reference":{"kind":"subnet","type":"","name":"","uuid":"6946d346-89db-41b2-bbf1-a05f38a9caf0"},"type":""}],"serial_port_list":[],"guest_tools":null,"num_vcpus_per_socket":1,"num_sockets":2,"gpu_list":[],"memory_size_mib":4096,"parent_reference":null,"hardware_clock_timezone":"","guest_customization":{"cloud_init":{"meta_data":"","type":"","user_data":"#cloud-config\nusers:\n  - name: centos\n    ssh-authorized-keys:\n      - @@{CENTOS.public_key}@@\n    sudo: ['ALL=(ALL) NOPASSWD:ALL']"},"type":"","sysprep":null},"power_state":"ON","type":"","account_uuid":"ece8d7ed-eda3-48f2-8d32-44285baa8599","boot_config":{"boot_device":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"}},"type":"","boot_type":"","mac_address":""},"disk_list":[{"data_source_reference":{"kind":"app_package","type":"","name":"CentOS_7_Cloud","uuid":"6d3d03f5-6eed-cbcb-e827-108378aa645e"},"type":"","disk_size_mib":0,"volume_group_reference":null,"device_properties":{"type":"","disk_address":{"type":"","device_index":0,"adapter_type":"SCSI"},"device_type":"DISK"}}]},"availability_zone_reference":null,"backup_policy":null,"type":"","cluster_reference":null,"categories":""},"variable_list":[]}],"credential_definition_list":[{"username":"admin","description":"","type":"PASSWORD","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"era_creds"},{"username":"centos","description":"","type":"KEY","secret":{"attrs":{"is_secret_modified":false,"secret_reference":{}}},"name":"CENTOS"}],"package_definition_list":[{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"DBClone"}],"name":"Package2","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package2"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"58ca4a03_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"8b1f1a7b_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"58ca4a03_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"Package2"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"ee8bedbe_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"faacff5d_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"ee8bedbe_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"","action_list":[],"type":"DEB","service_local_reference_list":[{"kind":"app_service","name":"NodeReact"}],"name":"WebTierInstall","version":"","options":{"install_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"WebTierInstall"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[{"kind":"app_task","name":"InstallSoftware"},{"kind":"app_task","name":"ConfApp"},{"kind":"app_task","name":"ConfNginx"}],"name":"1dd1b04d_dag","state":"ACTIVE","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"InstallSoftware"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"ConfApp"}},{"from_task_reference":{"kind":"app_task","name":"ConfApp"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"ConfNginx"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"NodeReact"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"InstallSoftware","state":"ACTIVE","attrs":{"exit_status":[],"script":"#!\/bin\/bash\nset -ex\n\n# Update and install packages\nsudo yum -y update\nsudo yum -y install wget git vim gcc gcc-c++ nginx\n\n# Install node\ncurl -sL https:\/\/rpm.nodesource.com\/setup_10.x | sudo bash -\nsudo yum install -y nodejs\nnode --version\n\n# Clone Repo\ngit clone https:\/\/github.com\/sharonpamela\/Fiesta.git\ncd ~\/Fiesta\nnpm install\ncd ~\/Fiesta\/client\nnpm install\nnpm run build\nnpm install nodemon concurrently","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"NodeReact"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"ConfApp","state":"ACTIVE","attrs":{"exit_status":[],"script":"#!\/bin\/bash\nset -ex\n\n# Modify DB config file\n\nsudo sed -i 's\/REPLACE_DB_NAME\/@@{source_db_name}@@\/g' ~\/Fiesta\/config\/config.js\nsudo sed -i 's\/REPLACE_DB_HOST_ADDRESS\/@@{DBClone.address}@@\/g' ~\/Fiesta\/config\/config.js\nsudo sed -i 's\/REPLACE_DB_DIALECT\/@@{db_dialect}@@\/g' ~\/Fiesta\/config\/config.js\nsudo sed -i 's\/REPLACE_DB_DOMAIN_NAME\/@@{db_domain_name}@@\/g' ~\/Fiesta\/config\/config.js\nsudo sed -i 's\/REPLACE_DB_USER_NAME\/@@{db_username}@@\/g' ~\/Fiesta\/config\/config.js\ndb_password='@@{db_password}@@'\ndb_escaped_pass=\"${db_password\/\/\\\/\/\\\\\/}\"\nsudo sed -i \"s\/REPLACE_DB_PASSWORD\/`echo $db_escaped_pass`\/g\" ~\/Fiesta\/config\/config.js\n\n# Modify the footer file so that it displays which DB is powering the app\nsudo sed -i 's\/--\/@@{db_dialect}@@\/g' ~\/Fiesta\/client\/src\/components\/Footer\/index.js\n\n# Create the unit file\necho '[Service]\n\nExecStart=\/usr\/bin\/node \/home\/centos\/Fiesta\/index.js\nRestart=always\nRestartSec=2s\n\nStandardOutput=syslog\nStandardError=syslog\n\nSyslogIdentifier=fiesta\n\nUser=root\nGroup=root\n\nEnvironment=NODE_ENV=production PORT=5001\n\n[Install]\nWantedBy=multi-user.target' | sudo tee \/etc\/systemd\/system\/fiesta.service\n\n# Reload daemons and start service\nsudo systemctl daemon-reload\nsudo systemctl start fiesta\nsudo systemctl enable fiesta\nsudo systemctl status fiesta -l","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"NodeReact"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"ConfNginx","state":"ACTIVE","attrs":{"exit_status":[],"script":"#!\/bin\/bash\nset -ex\n\n# install node websockets\n# sudo npm install ws\n\n# create the nginx config\nsudo mv \/etc\/nginx\/nginx.conf \/etc\/nginx\/nginx.confbkp\necho \"user nginx;\nworker_processes auto;\nerror_log \/var\/log\/nginx\/error.log;\npid \/run\/nginx.pid;\n# Load dynamic modules. See \/usr\/share\/doc\/nginx\/README.dynamic.\ninclude \/usr\/share\/nginx\/modules\/*.conf;\nevents {\n    worker_connections 1024;\n}\nhttp {\n    log_format  main  '\\$remote_addr - \\$remote_user [\\$time_local] \\\"\\$request\\\" '\n                      '\\$status \\$body_bytes_sent \\\"\\$http_referer\\\" '\n                      '\\\"\\$http_user_agent\\\" \\\"\\$http_x_forwarded_for\\\"';\n    access_log  \/var\/log\/nginx\/access.log  main;\n    sendfile            on;\n    tcp_nopush          on;\n    tcp_nodelay         on;\n    keepalive_timeout   65;\n    types_hash_max_size 2048;\n    include             \/etc\/nginx\/mime.types;\n    default_type        application\/octet-stream;\n    # Load modular configuration files from the \/etc\/nginx\/conf.d directory.\n    # See http:\/\/nginx.org\/en\/docs\/ngx_core_module.html#include\n    # for more information.\n    include \/etc\/nginx\/conf.d\/*.conf;\n    server {\n        listen       80 default_server;\n        listen       [::]:80 default_server;\n        server_name  @@{address}@@;\n        root         \/usr\/share\/nginx\/html;\n        # Load configuration files for the default server block.\n        include \/etc\/nginx\/default.d\/*.conf;\n        location \/ {\n        proxy_pass http:\/\/127.0.0.1:5001;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \\$host;\n        proxy_cache_bypass \\$http_upgrade;\n        }\n        error_page 404 \/404.html;\n            location = \/40x.html {\n        }\n        error_page 500 502 503 504 \/50x.html;\n            location = \/50x.html {\n        }\n    }\n}\" | sudo tee \/etc\/nginx\/nginx.conf\n\n#allow app access if SELinux is enabled\nsudo setenforce Permissive\n\n# start and enable nginx\nsudo systemctl start nginx\nsudo systemctl enable nginx\nsudo systemctl status nginx -l","script_type":"sh","type":"","command_line_args":"","login_credential_local_reference":{"kind":"app_credential","name":"CENTOS"}},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"85f7291d_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"1dd1b04d_dag"},"message_list":[],"variable_list":[]},"type":"","uninstall_runbook":{"task_definition_list":[{"target_any_local_reference":{"kind":"app_package","name":"WebTierInstall"},"retries":"0","description":"","message_list":[],"child_tasks_local_reference_list":[],"name":"0a7b4eab_dag","state":"ACTIVE","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]}],"description":"","name":"fbd6be06_runbook","state":"ACTIVE","main_task_local_reference":{"kind":"app_task","name":"0a7b4eab_dag"},"message_list":[],"variable_list":[]}},"variable_list":[]},{"description":"CentOS 7 Cloud Image","action_list":[],"type":"SUBSTRATE_IMAGE","service_local_reference_list":[],"name":"CentOS_7_Cloud","version":"","options":{"type":"","name":"CentOS_7_Cloud","resources":{"image_type":"DISK_IMAGE","checksum":{},"source_uri":"http:\/\/download.nutanix.com\/calm\/CentOS-7-x86_64-1810.qcow2","version":{"product_version":"7","type":"","product_name":"CentOS"},"architecture":"X86_64","type":""},"description":""},"variable_list":[]}],"app_profile_list":[{"deployment_create_list":[{"type":"GREENFIELD","action_list":[],"name":"f6be2786_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"Package2"}],"substrate_local_reference":{"kind":"app_substrate","name":"Era_Cloned_DB"},"variable_list":[],"description":""},{"type":"GREENFIELD","action_list":[],"name":"b7ba1e1c_deployment","min_replicas":"1","default_replicas":"1","depends_on_list":[],"published_service_local_reference_list":[],"max_replicas":"1","package_local_reference_list":[{"kind":"app_package","name":"WebTierInstall"}],"substrate_local_reference":{"kind":"app_substrate","name":"NodeReact_AHV"},"variable_list":[],"description":""}],"description":"","action_list":[{"description":"Run this action to get a list of Snapshot times and IDs of the clone's parent.","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1GetSnapshotList"}],"name":"a0f9d050_dag","attrs":{"edges":[],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DBClone"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1GetSnapshotList","attrs":{"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Get Time Machine Capability\nurl  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/tms\/@@{TM_ID}@@\/capability?summary=false&time-zone=UTC\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\nif resp.ok:\n  \n  # Cycle through the snapshot modes\n  for modes in json.loads(resp.content)['capability']:\n    print \"{0} MODE\".format(modes['mode'])\n    \n    # Cycle through the snapshots if they exist\n    if modes['snapshots']:\n      for snapshot in modes['snapshots']:\n        print \"  ------------------------\"\n        print \"  Snapshot ID (copy this): {0}\".format(snapshot['id'])\n        print \"  Snapshot Time Stamp:     {0}\".format(snapshot['snapshotTimeStamp'])\n        \n    # Print message if the don't exist\n    else:\n      print \"  ------------------------\"\n      print \"  No {0} snapshots exist.\".format(modes['mode'].lower())\n\nelse:\n  print \"Get Time Machine Capability request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"b03f406f_runbook","main_task_local_reference":{"kind":"app_task","name":"a0f9d050_dag"},"variable_list":[]},"name":"Get Parent Snapshot List"},{"description":"Run this action to refresh your database clone to a newer snapshot.  Optionally specify a snapshot ID, if left blank, the clone will be refreshed to the most recent snapshot.","type":"user","critical":false,"runbook":{"task_definition_list":[{"retries":"0","description":"","child_tasks_local_reference_list":[{"kind":"app_task","name":"1ValidateSnapID"},{"kind":"app_task","name":"2RefreshClone"},{"kind":"app_task","name":"3MonitorOperation"}],"name":"0bf61154_dag","attrs":{"edges":[{"from_task_reference":{"kind":"app_task","name":"1ValidateSnapID"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"2RefreshClone"}},{"from_task_reference":{"kind":"app_task","name":"2RefreshClone"},"edge_type":"user_defined","type":"","to_task_reference":{"kind":"app_task","name":"3MonitorOperation"}}],"type":""},"timeout_secs":"0","type":"DAG","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DBClone"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"1ValidateSnapID","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Get Time Machine Capability\nurl  = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/tms\/@@{TM_ID}@@\/capability?summary=false&time-zone=UTC\"\nresp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n\nif resp.ok:\n  \n  # If the SnapshotID macro is empty, we need to grab the last snap\n  if \"@@{source_snapshot_id}@@\" == \"\":\n  \n    # Cycle through the snapshot modes\n    for modes in json.loads(resp.content)['capability']:\n\n      # We only care about the recent \"Continuous\" snapshots\n      if modes['mode'] == \"CONTINUOUS\":\n        \n        # If there are no snapshots, error out\n        if not modes['snapshots']:\n          print \"ERROR: You must either provide a Snapshot ID, OR have a Continuous Snapshot.\"\n          exit(1)\n          \n        # Else, grab the last Snapshot ID and exit success\n        else:\n          print \"VALIDATED_SNAP_ID={0}\".format(modes['snapshots'][len(modes['snapshots'])-1]['id'])\n          exit(0)\n      \n  # If the snapshot macro is not empty, we need to check that it's a valid snap ID\n  else:\n    \n    # Cycle through the snapshot modes\n    for modes in json.loads(resp.content)['capability']:\n      \n      # Cycle through the snapshots if they exist\n      if modes['snapshots']:\n        for snapshot in modes['snapshots']:\n          \n          # If the SnapshotID macro equals an actual Snap ID, then print out and exit success\n          if snapshot['id'] == \"@@{source_snapshot_id}@@\":\n            print \"VALIDATED_SNAP_ID={0}\".format(snapshot['id'])\n            exit(0)\n          \n    # If we've gotten to this point, the SnapshotID macro is not a valid Snap ID, so error out\n    print \"ERROR: The Snapshot ID you entered is not valid. You must either:\"\n    print \"  1. Provide a valid Snapshot ID from the list below, or\"\n    print \"  2. Leave the SnapshotID field blank to use the last Snapshot.\"\n    print \"  ========================\"\n\n    # Cycle through the snapshot modes\n    for modes in json.loads(resp.content)['capability']:\n      print \"{0} MODE\".format(modes['mode'])\n    \n      # Cycle through the snapshots if they exist\n      if modes['snapshots']:\n        for snapshot in modes['snapshots']:\n          print \"  ------------------------\"\n          print \"  Snapshot ID (copy this): {0}\".format(snapshot['id'])\n          print \"  Snapshot Time Stamp:     {0}\".format(snapshot['snapshotTimeStamp'])\n        \n      # Print message if the don't exist\n      else:\n        print \"  ------------------------\"\n        print \"  No {0} snapshots exist.\".format(modes['mode'].lower())\n\n    exit(1)\n  \n  # If we've gotten this far, something unknown went wrong\n  print \"Unknown error.  Please contact your Administrator.\"\n  exit(1)\n\n# In the event something went wrong with the API call\nelse:\n  print \"Get Time Machine Capability request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["VALIDATED_SNAP_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DBClone"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"2RefreshClone","attrs":{"exit_status":[],"script":"# Set creds and headers\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\n\n# Set the URL and payload\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/clones\/@@{CLONE_ID}@@\/refresh\"\npayload = {\n  \"cloneId\": \"@@{CLONE_ID}@@\",\n  \"snapshotId\": \"@@{VALIDATED_SNAP_ID}@@\",\n  \"latestSnapshot\": False,\n  \"timeZone\": \"UTC\",\n  \"cloneInfo\": [\n    {\n      \"name\": \"working_dir\",\n      \"value\": \"@@{WORKING_DIR}@@\"\n    }\n  ]\n}\n\n# Make the call and set the response operation ID to the variable\nresp = urlreq(url, verb='POST', auth='BASIC', user=era_user, passwd=era_pass, params=json.dumps(payload), headers=headers)\nif resp.ok:\n  print \"REFRESH_OPERATION_ID={0}\".format(json.loads(resp.content)['operationId'])\nelse:\n  print \"Post Database refresh request failed\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","eval_variables":["REFRESH_OPERATION_ID"],"eval_scope":"local","type":"","script_type":"static"},"timeout_secs":"0","type":"SET_VARIABLE","variable_list":[]},{"target_any_local_reference":{"kind":"app_service","name":"DBClone"},"retries":"0","description":"","child_tasks_local_reference_list":[],"name":"3MonitorOperation","attrs":{"script":"# Set creds, headers, and URL\nera_user = '@@{era_creds.username}@@'\nera_pass = '@@{era_creds.secret}@@'\nheaders = {'Content-Type': 'application\/json', 'Accept': 'application\/json'}\nurl     = \"https:\/\/@@{era_ip}@@:8443\/era\/v0.8\/operations\/@@{REFRESH_OPERATION_ID}@@\"\n\n# Monitor the operation\nfor x in range(20):\n  \n  print \"Sleeping for 30 seconds.\"\n  sleep(30)\n  resp = urlreq(url, verb='GET', auth='BASIC', user=era_user, passwd=era_pass, headers=headers)\n  print \"Percentage Complete: {0}\".format(json.loads(resp.content)['percentageComplete'])\n  \n  # If complete, break out of loop\n  if json.loads(resp.content)['percentageComplete'] == \"100\":\n    break\n\n# If the operation did not complete within 20 minutes, assume it's not successful and error out\nif json.loads(resp.content)['percentageComplete'] != \"100\":\n  print \"Get Operation ID timed out\", json.dumps(json.loads(resp.content), indent=4)\n  exit(1)","type":"","command_line_args":"","exit_status":[],"script_type":"static"},"timeout_secs":"0","type":"EXEC","variable_list":[]}],"description":"","name":"2264c81a_runbook","main_task_local_reference":{"kind":"app_task","name":"0bf61154_dag"},"variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"source_snapshot_id","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false}]},"name":"Refresh Clone"}],"name":"AHV","variable_list":[{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"source_db_name","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"source_snapshot_id","value":"","label":"","attrs":{"type":""},"is_hidden":false},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"cloned_db_name","value":"","label":"","is_hidden":false},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"SECRET","name":"db_password","value":"","label":"","attrs":{"is_secret_modified":false,"secret_reference":{},"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"era_ip","value":"","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"db_dialect","value":"mssql","label":"","attrs":{"type":""},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"db_domain_name","value":"ntnxlab.local","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}},{"val_type":"STRING","is_mandatory":false,"description":"","data_type":"BASE","type":"LOCAL","name":"db_username","value":"administrator","label":"","attrs":{"type":""},"editables":{"value":true},"is_hidden":false,"options":{"type":"PREDEFINED","choices":[]}}]}],"published_service_definition_list":[],"default_credential_local_reference":{"kind":"app_credential","name":"era_creds"},"type":"USER"},"name":"FiestaClonedDB"},"api_version":"3.0","metadata":{"last_update_time":"1582061419705079","kind":"blueprint","spec_version":4,"creation_time":"1582061113348033","name":"FiestaClonedDB"}}
